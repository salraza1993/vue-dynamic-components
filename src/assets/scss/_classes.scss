// =============================[ Display ]============================= //
.display, .d {
  $types: (flex, inline-flex, block, inline-block, grid, inline-grid, none);
  @for $i from 1 to length($types) + 1 {
    &--#{nth($types, $i)}, &-#{nth($types, $i)} {
      display: nth($types, $i) !important;
    }
  }
}

.flex {
  $flexDirection: (column, column-reverse, row, row-reverse, initial, inherit, revert);
  @for $i from 1 to length($flexDirection) + 1 {
    &--#{nth($flexDirection, $i)}, &-#{nth($flexDirection, $i)} {
      flex-direction: nth($flexDirection, $i) !important;
    }
  }
  &-shrink {
    &--0 { flex-shrink: 0; }
    &--1 { flex-shrink: 1; }
  }
  &-grow {
    &--0 { flex-grow: 0; }
    &--1 { flex-grow: 1; }
  }
  &-basis {
    &--0 { flex-basis: 0; }
    &--1 { flex-basis: 1; }
  }
  &-wrap, &--wrap { flex-wrap: wrap !important; }
  &-nowrap, &--nowrap { flex-wrap: nowrap !important; }
}

.fs, .font-size {
  &--h1 {
    font-size: clamp(1.5rem, 12vw, 2rem);
    line-height: clamp(1.75rem, 14vw, 2.5rem);
  }
  &--h2 {
    font-size: clamp(1.25rem, 10vw, 1.75rem);
    line-height: clamp(1.5rem, 12vw, 2.25rem);
  }
  &--regular {
    font-size: clamp(1rem, 5vw, 1.15rem);
    line-height: clamp(1.5rem, 6vw, 1.75rem);
  }
}

.gap {
  $gaps: '0', '0.25rem', '0.5rem', '0.75rem', '1rem', '1.5rem', '2rem', '2.5rem', '3rem';
  $gapSizes: 0, 1, 2, 3, 4, 5, 6, 7, 8;
  @for $i from 1 to length($gapSizes) + 1 {
    &--#{nth($gapSizes, $i)} {
      gap: #{nth($gaps, $i)} !important;
    }    
  }  
}

// =============================[ Justify Content ]============================= //
.justify-content, .justify__content, .jc {
  $types: (center, end, start, inherit, initial, around, between, evenly, revert, stretch, normal);
  @for $i from 1 to length($types) + 1 {    
    &--#{nth($types, $i)},
    &-#{nth($types, $i)} {
      @if nth($types, $i) == 'end' { 
        justify-content: flex-#{nth($types, $i)} !important; 
      } @else if nth($types, $i) == 'start' { 
        justify-content: flex-#{nth($types, $i)} !important; 
      } @else if nth($types, $i) == 'around' { 
        justify-content: space-#{nth($types, $i)} !important; 
      } @else if nth($types, $i) == 'between' { 
        justify-content: space-#{nth($types, $i)} !important; 
      } @else if nth($types, $i) == 'evenly' { 
        justify-content: space-#{nth($types, $i)} !important; 
      } @else { 
        justify-content: nth($types, $i) !important; 
      }
    }
  }
}
// =============================[ Align Items ]============================= //
.align-items, .align__items, .ai {
  $types: (baseline, center, end, inherit, initial, self-end, stretch, start, normal, revert, self-end, self-start);
  @for $i from 1 to length($types) + 1 {    
    &--#{nth($types, $i)}, &-#{nth($types, $i)} {
      @if nth($types, $i) == 'end' { 
        align-items: flex-#{nth($types, $i)} !important; 
      } @else if nth($types, $i) == 'start' { 
        align-items: flex-#{nth($types, $i)} !important; 
      } @else { 
        align-items: nth($types, $i) !important; 
      }
    }
  }
}

.font__weight, .fw {
  $fwName: ('thin', 'light', 'regular', 'medium', 'semibold', 'bold', 'black', 'extra-blcak');
  $fwTypes: (100, 300, 400, 500, 600, 700, 800, 900);
  @for $i from 1 to length($fwName) + 1 {
    &--#{nth($fwName, $i)} {
      font-weight: nth($fwTypes, $i) !important;
    }    
  }  
}

.ff {
  &--code { font-family: var(--font-code) !important;}
}

.rounded {
  border-radius: var(--border-radius) !important;
  &-top--left { border-top-left-radius: var(--border-radius) !important;}
  &-bottom--left { border-bottom-left-radius: var(--border-radius) !important;}
  &-top--right { border-top-right-radius: var(--border-radius) !important;}
  &-bottom--right { border-bottom-right-radius: var(--border-radius) !important;}
  &-0, &--0 { --border-radius: 0; }
}

.border {
  border: var(--border-width) var(--border-style) var(--border-color);
  &-0, &--0 { --border-width: 0; }

  $types: ('top', 'left', 'right', 'bottom');
  @each $type in $types {
    &--#{$type} {
      border-#{$type}: var(--border-width) var(--border-style) var(--border-color) !important;
    }
  }
  $colors: ('primary', 'secondary', 'danger', 'success', 'info', 'warning', 'dark', 'black', 'light', 'white');
  @each $color in $colors {
    &--#{$color} {
      --border-color: var(--#{$color});
      border: var(--border-width) var(--border-style) var(--border-color) !important;
    }
  }

}

.text {
  $types: (inherit, initial, capitalize, lowercase, uppercase, none, revert);
  &__transform, &-transform {
    @each $type in $types {
      &--#{$type} {
        text-transform: $type !important;
      }
    }
  }

  $decorations: (inherit, initial, underline, line-through, none);
  &-decoration {
    @each $decoration in $decorations {
      &--#{$decoration} {
        text-decoration: $decoration !important;
      }
    }
  }
  &-hover {
    @each $decoration in $decorations {
      &--#{$decoration}:hover { text-decoration: $decoration !important; }
    }
  }

  $fwName: ('thin', 'light', 'regular', 'medium', 'semibold', 'bold', 'black', 'extra-blcak');
  $fwTypes: (100, 300, 400, 500, 600, 700, 800, 900);
  @for $i from 1 to length($fwName) + 1 {
    &--#{nth($fwName, $i)} {
      font-weight: nth($fwTypes, $i) !important;
    }    
  }
  
  $names: ('primary', 'secondary', 'white', 'black', 'dark', 'danger', 'success', 'warning', 'info');
  $colors: (--primary, --secondary, --white, --black, --dark, --danger, --success, --warning, --info);
  @for $i from 1 to length($names) + 1 {
    &--#{nth($names, $i)} {
      color: var(nth($colors, $i)) !important;
    }
    &-hover--#{nth($names, $i)} {
      &:hover {
        color: var(nth($colors, $i)) !important;
      }
    }
  }
  
}

.bg {
  $names: ('primary', 'secondary', 'white', 'black', 'dark', 'danger', 'success', 'warning', 'info');
  $colors: (--primary, --secondary, --white, --black, --dark, --danger, --success, --warning, --info);
  @for $i from 1 to length($names) + 1 {
    &--#{nth($names, $i)} {
      background-color: var(nth($colors, $i)) !important;
    }
    &-hover--#{nth($names, $i)} {
      &:hover {
        background-color: var(nth($colors, $i)) !important;
      }
    }
  }
}

$marginPaddingNames: (0, 1, 2, 3, 4, 5);
$marginPaddingSizes: (0, 0.25rem, 0.5rem, 1rem, 1.5rem, 3rem);
@for $i from 1 to length($marginPaddingSizes) + 1 {
  // ========================= margins ========================= //
  .my {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      margin-block: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .mx {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      margin-inline: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .mb {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} {
      margin-bottom: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .mt {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} {
      margin-top: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .ms {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} {
      margin-left: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .me {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} {
      margin-right: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }

  // ========================= padding ========================= //
  .p {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .py {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-block: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .px {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-inline: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .pb {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-bottom: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .pt {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-top: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .ps {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-left: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .pe {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      padding-right: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }

  // ========================= padding ========================= //
  .gy {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      row-gap: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .gx {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      column-gap: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  .g {
    &--#{nth($marginPaddingNames, $i)}, &-#{nth($marginPaddingNames, $i)} { 
      margin-top: #{nth($marginPaddingSizes, $i)} !important; 
    }
  }
  
}

